library(readr)
library(tidyverse)
library(lubridate)
library(skimr)
library(naniar)
library(ggmap)
library(gplots)
library(RColorBrewer)
library(sf)
library(leaflet)
library(formattable)
library(shiny)
board_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
board_games %>%
group_by(year_published) %>%
summarise(num_published = n()) %>%
ggplot(aes(x=year_published, y=num_published))+
geom_line()+
theme_classic()
# shinyApp(
# ui <- fluidPage(
#   sliderInput(inputId = "year", label = "Year Published",
#               min = 1950, max = 2019, value = c(1950,2019),sep = ""),
#   textInput("max_players", "Max Players", value = "", placeholder = "1"),
#   selectInput("minage", "Min age", choices = board_games$min_age),
#   submitButton(text = "Create my plot!"),
#   plotOutput(outputId = "timeplot")),
#
# server <- function(input, output) {
#   output$timeplot <- renderPlot({
#     board_games %>%
#       arrange(min_age) %>%
#       filter(max_players == input$max_players, min_age == input$minage) %>%
#       ggplot(aes(x = year_published, y = average_rating, color=min_playtime, label = name))+
#       geom_point()+
#       geom_text()+
#       scale_x_continuous(limits = input$year) +
#       theme_classic()
#   })
# },
# options = list(height=750)
# )
library(readr)
video_games <- read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/video_games.csv")
video_games[video_games==0] <- NA
vg_clean<-video_games %>%
drop_na()
vg_clean %>%
ggplot(aes(x = price))+
geom_density() +
theme_classic()
top_20_avrplaytime_game <- vg_clean %>%
select(game, average_playtime, price, owners) %>%
arrange(desc(average_playtime)) %>%
head(20)
top_20_avrplaytime_game %>%
ggplot(aes(x=price, y=average_playtime,label=game, color = owners))+
geom_point()+
geom_text(family="STKaiti")+
theme_classic()
# Read Data
pizza_jared <- readr::read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/ideas/pizza_jared.csv")
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
head(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
head(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()
library(readr)
library(tidyverse)
library(lubridate)
library(skimr)
library(naniar)
library(ggmap)
library(gplots)
library(RColorBrewer)
library(sf)
library(leaflet)
library(formattable)
library(shiny)
board_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
board_games %>%
group_by(year_published) %>%
summarise(num_published = n()) %>%
ggplot(aes(x=year_published, y=num_published))+
geom_line()+
theme_classic()
# shinyApp(
# ui <- fluidPage(
#   sliderInput(inputId = "year", label = "Year Published",
#               min = 1950, max = 2019, value = c(1950,2019),sep = ""),
#   textInput("max_players", "Max Players", value = "", placeholder = "1"),
#   selectInput("minage", "Min age", choices = board_games$min_age),
#   submitButton(text = "Create my plot!"),
#   plotOutput(outputId = "timeplot")),
#
# server <- function(input, output) {
#   output$timeplot <- renderPlot({
#     board_games %>%
#       arrange(min_age) %>%
#       filter(max_players == input$max_players, min_age == input$minage) %>%
#       ggplot(aes(x = year_published, y = average_rating, color=min_playtime, label = name))+
#       geom_point()+
#       geom_text()+
#       scale_x_continuous(limits = input$year) +
#       theme_classic()
#   })
# },
# options = list(height=750)
# )
library(readr)
video_games <- read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/video_games.csv")
video_games[video_games==0] <- NA
vg_clean<-video_games %>%
drop_na()
vg_clean %>%
ggplot(aes(x = price))+
geom_density() +
theme_classic()
top_20_avrplaytime_game <- vg_clean %>%
select(game, average_playtime, price, owners) %>%
arrange(desc(average_playtime)) %>%
head(20)
top_20_avrplaytime_game %>%
ggplot(aes(x=price, y=average_playtime,label=game, color = owners))+
geom_point()+
geom_text(family="STKaiti")+
theme_classic()
# Read Data
pizza_jared <- readr::read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/pizza_jared.csv")
pizza_barstool <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-01/pizza_barstool.csv")
pizza_datafiniti <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-01/pizza_datafiniti.csv")
leaflet(data=pizza_datafiniti) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "red", label=~name,stroke = FALSE, fillOpacity = 0.5, radius = 2)
mn_pizza <- pizza_datafiniti %>%
filter(province == "MN")
leaflet(data=mn_pizza) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addMarkers(lng = ~longitude, lat = ~latitude, label = ~name,clusterOptions = markerClusterOptions())
# sum the total votes and rate
pizza_excerllent <- pizza_jared %>%
filter(answer=="Excellent") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_good <- pizza_jared %>%
filter(answer=="Good") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_average <- pizza_jared %>%
filter(answer=="Average") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_poor <- pizza_jared %>%
filter(answer=="Poor") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_never <- pizza_jared %>%
filter(answer=="Never Again") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
# create pizza rating data frame
pizza_rating <- rbind(pizza_excerllent, pizza_good, pizza_average, pizza_poor, pizza_never) %>%
mutate(date = as_datetime(time)) %>%
mutate(year=year(date)) %>%
group_by(place, year, answer) %>%
mutate(year_avr_rate = mean(p))
# Top ten highest Excerllent rate
top_ten_excerllent<-pizza_rating %>%
filter(answer=="Excellent") %>%
group_by(place) %>%
summarise(rate = sum(p)/n()) %>%
arrange(desc(rate)) %>%
head(10)
# Graph
top_ten_excerllent %>%
inner_join(pizza_rating, by="place") %>%
ggplot(aes(x=answer, y=percent, fill=place))+
geom_bar(stat='identity',position='dodge')+
theme_classic()
# Read Data
grads <- readr::read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/recent-grads.csv")
grads %>%
mutate(Major_category=fct_reorder(Major_category,Median)) %>%
ggplot(aes(Major_category, Median))+
geom_boxplot()+
coord_flip()
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
head(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()+
theme_classic()
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
tail(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()+
theme_classic()
grads %>%
count(Major_category, wt=Total, sort=TRUE)
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n))
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n))+
geom_col()+
coord_flip()
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n))+
geom_col()+
coord_flip()+
theme_classic(legend.position="none")
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n))+
geom_col()+
coord_flip()+
theme_classic()+
theme(legend.position="none")
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n, fill=Major_category))+
geom_col()+
coord_flip()+
theme_classic()+
theme(legend.position="none")
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n, fill=Major_category))+
geom_col()+
coord_flip()+
theme_classic()
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n, fill=Major_category))+
geom_col()+
coord_flip()+
theme_classic()+
theme(legend.position="none")
library(readr)
library(tidyverse)
library(lubridate)
library(skimr)
library(naniar)
library(ggmap)
library(gplots)
library(RColorBrewer)
library(sf)
library(leaflet)
library(formattable)
library(shiny)
board_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
board_games %>%
group_by(year_published) %>%
summarise(num_published = n()) %>%
ggplot(aes(x=year_published, y=num_published))+
geom_line()+
theme_classic()
# shinyApp(
# ui <- fluidPage(
#   sliderInput(inputId = "year", label = "Year Published",
#               min = 1950, max = 2019, value = c(1950,2019),sep = ""),
#   textInput("max_players", "Max Players", value = "", placeholder = "1"),
#   selectInput("minage", "Min age", choices = board_games$min_age),
#   submitButton(text = "Create my plot!"),
#   plotOutput(outputId = "timeplot")),
#
# server <- function(input, output) {
#   output$timeplot <- renderPlot({
#     board_games %>%
#       arrange(min_age) %>%
#       filter(max_players == input$max_players, min_age == input$minage) %>%
#       ggplot(aes(x = year_published, y = average_rating, color=min_playtime, label = name))+
#       geom_point()+
#       geom_text()+
#       scale_x_continuous(limits = input$year) +
#       theme_classic()
#   })
# },
# options = list(height=750)
# )
library(readr)
video_games <- read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/video_games.csv")
video_games[video_games==0] <- NA
vg_clean<-video_games %>%
drop_na()
vg_clean %>%
ggplot(aes(x = price))+
geom_density() +
theme_classic()
top_20_avrplaytime_game <- vg_clean %>%
select(game, average_playtime, price, owners) %>%
arrange(desc(average_playtime)) %>%
head(20)
top_20_avrplaytime_game %>%
ggplot(aes(x=price, y=average_playtime,label=game, color = owners))+
geom_point()+
geom_text(family="STKaiti")+
theme_classic()
# Read Data
pizza_jared <- readr::read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/pizza_jared.csv")
pizza_barstool <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-01/pizza_barstool.csv")
pizza_datafiniti <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-01/pizza_datafiniti.csv")
leaflet(data=pizza_datafiniti) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, color = "red", label=~name,stroke = FALSE, fillOpacity = 0.5, radius = 2)
mn_pizza <- pizza_datafiniti %>%
filter(province == "MN")
leaflet(data=mn_pizza) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addMarkers(lng = ~longitude, lat = ~latitude, label = ~name,clusterOptions = markerClusterOptions())
# sum the total votes and rate
pizza_excerllent <- pizza_jared %>%
filter(answer=="Excellent") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_good <- pizza_jared %>%
filter(answer=="Good") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_average <- pizza_jared %>%
filter(answer=="Average") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_poor <- pizza_jared %>%
filter(answer=="Poor") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
pizza_never <- pizza_jared %>%
filter(answer=="Never Again") %>%
group_by(place) %>%
mutate(sum_votes=sum(votes), sum_total=sum(total_votes)) %>%
mutate(p = sum_votes/sum_total)
# create pizza rating data frame
pizza_rating <- rbind(pizza_excerllent, pizza_good, pizza_average, pizza_poor, pizza_never) %>%
mutate(date = as_datetime(time)) %>%
mutate(year=year(date)) %>%
group_by(place, year, answer) %>%
mutate(year_avr_rate = mean(p))
# Top ten highest Excerllent rate
top_ten_excerllent<-pizza_rating %>%
filter(answer=="Excellent") %>%
group_by(place) %>%
summarise(rate = sum(p)/n()) %>%
arrange(desc(rate)) %>%
head(10)
# Graph
top_ten_excerllent %>%
inner_join(pizza_rating, by="place") %>%
ggplot(aes(x=answer, y=percent, fill=place))+
geom_bar(stat='identity',position='dodge')+
theme_classic()
# Read Data
grads <- readr::read_csv("https://raw.githubusercontent.com/RoanFM/Compsci-final/master/Data/recent-grads.csv")
grads %>%
mutate(Major_category=fct_reorder(Major_category,Median)) %>%
ggplot(aes(Major_category, Median))+
geom_boxplot()+
coord_flip()
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
head(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()+
theme_classic()
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
tail(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()+
theme_classic()
grads %>%
count(Major_category, wt=Total, sort=TRUE) %>%
mutate(Major_category = fct_reorder(Major_category, n)) %>%
ggplot(aes(Major_category,n, fill=Major_category))+
geom_col()+
coord_flip()+
theme_classic()+
theme(legend.position="none")s
grads %>%
mutate(Major_category=fct_reorder(Major_category,Median)) %>%
ggplot(aes(Major_category, Median, fill=Major_category))+
geom_boxplot()+
coord_flip()+
theme(legend.position="none")
grads %>%
mutate(Major_category=fct_reorder(Major_category,Median)) %>%
ggplot(aes(Major_category, Median, fill=Major_category))+
geom_boxplot()+
coord_flip()+
theme_classic()+
theme(legend.position="none")
grads %>%
arrange(desc(Median)) %>%
select(Major, Major_category, Median, P25th, P75th) %>%
head(20) %>%
mutate(Major = fct_reorder(Major, Median)) %>%
ggplot(aes(Major, Median, color=Major_category))+
geom_point()+
geom_errorbar(aes(ymin=P25th,ymax=P75th))+
expand_limits(y=0)+
coord_flip()+
theme_classic()
